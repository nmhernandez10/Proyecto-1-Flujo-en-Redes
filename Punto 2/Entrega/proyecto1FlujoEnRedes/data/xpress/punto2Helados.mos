model ModelName
uses "mmxprs"; !gain access to the Xpress-Optimizer solver
uses "mmsystem";


!sample declarations section
declarations
N: set of integer
K: set of string

!parametros
c: dynamic array(N,N) of real
n: integer
C:integer
D: array(N) of integer
V: integer					!Numero de vehiculos a usar en el problema
Mf:real
Mv:real
Mt:real
Cm:real
granM:integer
b: array(N,K) of integer

!Variables de decision
x: dynamic array (N,N) of mpvar

end-declarations

initializations from "parameters.txt"
	n V Mf Mv Mt Cm C granM
end-initializations

initializations from "b.txt"
	b
end-initializations

procedure readadyacencia(strin:string, fila:integer, columna:integer)
	num := parseint(strin,1)
	if num>0 then
		create(x(fila,columna))
		create(x(fila,columna))
	end-if
end-procedure

procedure readCost(strin:string, fila:integer,columna:integer)
	if exists(x(fila,columna)) then
		c(fila,columna):= parsereal(strin,1)
	end-if
end-procedure

procedure initialize
	fopen("adyacencias.txt",F_INPUT)
		j:=""
		contadorF:=0
		contadorC:=0
		while(not iseof) do
			contadorC+=1
			read(j,"\t")
			if contadorC> V+n+1 then
				contadorC:=0
				contadorF+=1
			end-if
			if contadorF>0 and contadorC>0 then
				readadyacencia(j,contadorF,contadorC)	
			end-if
		end-do
	fclose(F_INPUT)
	
	fopen("costos.txt",F_INPUT)
		j:=""
		contadorF:=0
		contadorC:=0
		while(not iseof) do
			contadorC+=1
			read(j,"\t")
			if contadorC> V+n+1 then
				contadorC:=0
				contadorF+=1
			end-if
			if contadorF>0 and contadorC>0 then
				readCost(j,contadorF,contadorC)	
			end-if
		end-do
	fclose(F_INPUT)
	
end-procedure


initialize 

!Restriccion balance para ambos subproblemas
forall(i in N) do
	sum(j in N | exists(x(i,j)))x(i,j) -sum(j in N | exists(x(j,i)))x(j,i) = b(i,'helados')
end-do

!Restriccion de capacidad que une ambos subproblemas
!forall(i,j in N | exists(x(i,j,'helados')))do
!	x(i,j,'helados') <= x(i,j,'vehiculos')*C
!end-do



Fo:= sum(i,j in N | exists(x(i,j)))x(i,j)

minimize(Fo)
end-model
